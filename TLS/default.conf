######################################################################################################
## MAKE SURE TO REPLACE EVERY [example.com] WITH YOUR ACTUAL DOMAIN, OTHERWISE EXPECT NGINX ERRORS! ##
######################################################################################################
server {
    # Listen on port 80 for HTTPS redirect and Certbot
    listen 80;
    listen [::]:80;
    server_name example.com;
    return 301 https://$server_name$request_uri;
}

server {
    # Listen on port 443 to serve TLS over HTTP/2
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name example.com;

    root /var/www/html;
    index default.html;

    access_log /var/log/nginx/default-access.log;
    error_log  /var/log/nginx/default-error.log error;

    # allow larger file uploads and longer script runtimes
    client_max_body_size 64m;
    client_body_timeout 60s;

    sendfile off;

    # SSL Configuration - Replace the example.com with your domain
    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/example.com/fullchain.pem;

    # Only enable TLS 1.3 and 1.2, TLS 1.1 and 1.0 are insecure, do not even talk about SSL 2.0 and 3.0
    ssl_protocols TLSv1.2 TLSv1.3;
    # TLS 1.3 0-RTT, creates possibility of replay attacks, is insecure.
    ssl_early_data off;
    # Ensure that the webserver decides the ciphersuite order.
    ssl_prefer_server_ciphers on;
    # TLS 1.3 ciphers must also be configured in /etc/ssl/openssl.cnf before adding here. TLS 1.2 ciphersuites are configurable here, uses OpenSSL naming.
    ssl_ciphers "TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256";
    #ssl_ciphers "TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256";
    # This only works in much newer Nginx versions, if you use my openssl.cnf then you can get the below params for older Nginx too.
    #ssl_conf_command Ciphersuites TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384;
    #ssl_conf_command Options ServerPreference,PrioritizeChaCha,NoRenegotiation,NoResumptionOnRenegotiation;

    # Recommended to use strongest ECC first, preferring EdDSA over NIST's ECDSA where possible. X25519 KEX is supported by many clients today, but also many still do not, so P-521 and P-384 are fallback but still cryptographically strong.
    ssl_ecdh_curve X448:X25519:secp521r1:secp384r1;
    # For much older clients that still do not use ECDHE Key Exchange (note: even the crappiest potato laptop from 2000 support TLS 1.2 AES-GCM ciphersuites so you probably do not need DHE KEX)
    #ssl_dhparam /etc/nginx/ffdhe4096.pem;

    # Timeout for TLS sessions (keepalive for TLS based sessions, by cache, time or session tickets)
    ssl_session_cache shared:MozSSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # Disable HTTP Compression unless you process loads of traffic (e.g like YouTube, Vimeo and so on)
    gzip off;
    # Disable ETags as they harm privacy.
    etag off;

    # NextDNS Anycast IPv4 addresses. is generally as fast as Cloudflare but has no logging unlike 1.1.1.1 DNS
    resolver 45.90.28.0:53 45.90.30.0:53;
    resolver_timeout 600s;

    # An example rewrite, in this case, https://example.com/duckduckgo would lead to https://duckduckgo.com
    #rewrite ^/duckduckgo$ https://duckduckgo.com permanent;

    # See https://hstspreload.org/ before uncommenting the line below.
    # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
    add_header Strict-Transport-Security "max-age=63072000;";
    # Only displayed for legacy purposes, HPKP can break things so it is not recommended to use anymore (especially since it's been superseded)
    # add_header Public-Key-Pins 'pin-sha256="J2/oqMTsdhFWW/n85tys6b4yDBtb6idZayIEBx7QTxA="; pin-sha256="jQJTbIh0grw0/1TkHSumWb+Fs0Ggogr621gT3PvPKG0="; pin-sha256="diGVwiVYbubAI3RW4hB9xU8e/CH2GnkuvVFZE8zmgzI="; pin-sha256="C5+lpZ7tcVwmwQIMcRtPbsQtWLABXhQzejna0wHFr8M="; pin-sha256="Vjs8r4z+80wjNcr1YKepWQboSIRi63WsWXhIMN+eWys="; max-age=2592000';
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Robots-Tag none;
    #add_header Content-Security-Policy "frame-ancestors 'self'; upgrade-insecure-requests";
    # This is the most secure CSP that will satisfy internet.nl, but if you use scripts or other content like images, inline JavaScript, or anything else, you'll need to whitelist it, CSP is tricky to configure securely without breaking your website. Ensure to test CSP before deploying, or duplicate your webserver onto a test environment.
    add_header Content-Security-Policy "default-src 'self'; frame-src 'self'; frame-ancestors 'self'; script-src 'strict-dynamic'; style-src 'strict-dynamic'; frame-src 'img-src'; connect-src 'self'; font-src 'self'; object-src 'self'; media-src 'self'; upgrade-insecure-requests";
    #add_header Content-Security-Policy-Report-Only "default-src 'self'; frame-src 'self'; frame-ancestors 'self'; script-src 'self'; style-src 'self'; frame-src 'img-src'; connect-src 'self'; font-src 'self'; object-src 'self'; media-src 'self'; upgrade-insecure-requests";
    add_header X-Frame-Options DENY;
    add_header Referrer-Policy no-referrer;
}
#################
## END OF FILE ##
#################
